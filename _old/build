#!/usr/bin/env bash

# Always operate from script directory
cd "$(dirname "$0")"

[ "$1" = "public" ] ; PRIVATE=$?

set -e # Break on any error

if [ ! -f .env ]; then
    cp .env.dist .env
fi

if [ ! -f overwrites/.env ]; then
    cp overwrites/.env.dist overwrites/.env
fi

# When not in docker start docker and execute script again
if [ ! -d "/var/www/html/docker" ] ; then
    ./stop
    echo y | docker-compose rm
    docker-compose build
    docker-compose up -d
    docker-compose exec nginx docker/nginx/ssl/certbot
    docker-compose exec --user 1000 php /bin/sh build
    exit 0 # Do not continue as we already ran the script above
fi

rm -rf application

# Install to latest version of Composer
composer self-update --snapshot

# Create new project from skeleton and build parts
composer create-project symfony/website-skeleton application -s beta --no-install

# Further build application
(
    cd application

    # Application bundles
    composer require \
        google/apiclient \
        php-http/httplug-pack \
        --no-update



    # Development bundles
    composer require \
        phpmetrics/phpmetrics \
        --no-update --dev

    cp -a ../overwrites/. .

    if [ $PRIVATE = 0 ]; then
        rm -rf config/routes/endroid_play.yaml
    fi

    # Update to the latest possible versions
    COMPOSER_MEMORY_LIMIT=-1 composer update -n


    chmod +x /var/www/html/application/vendor/php-ai/php-ml/bin/libsvm/*

    rm -rf features/demo.feature

    # Set up assets
    (
        cd assets
        ./build
    )
)

# Reset the application itself to make it functional
(
    cd application
    bin/reset
)
