security:
#    acl:
#        connection: default

    encoders:
        FOS\UserBundle\Model\UserInterface: # UserBundle\Entity\User:
            algorithm: bcrypt
            cost: 13

    role_hierarchy:
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH, ROLE_INTAKE]
        ROLE_ADMIN: [ROLE_USER, ROLE_SONATA_ADMIN, ROLE_API_ADMIN]
        ROLE_API_ADMIN: [ROLE_API]
        ROLE_API: []

    providers:
        fos_userbundle:
            id: user.provider.user_provider
#            id: fos_user.user_provider.username_email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        api_oauth:
            pattern: ^/api/.*
            fos_oauth: true
            stateless: true # do not store user information between requests
            anonymous: true # allow anonymous access (i.e. for public GET calls)
            context: api

#        oauth_token:
#            pattern: ^/oauth/v2/token
#            security: false

#        oauth_authorize:
#            pattern: ^/oauth/v2/auth
#            form_login:
#                 provider: fos_userbundle
#                 check_path: /oauth/v2/auth/login_check
#                 login_path: /oauth/v2/auth/login
#            anonymous: true

        main:
            pattern: ^/
            form_login:
                provider: fos_userbundle
                csrf_token_generator: security.csrf.token_manager
                default_target_path: /admin/dashboard
                always_use_default_target_path: true
                success_handler: user.handler.login
#                login_path: /admin/login
#                use_forward: false
#                check_path: /admin/login_check
#                failure_path: /admin/login
            oauth:
                resource_owners:
                    google: /oauth-login/check-google
                login_path: /login
                use_forward: false
                failure_path: /login
                default_target_path: /admin/dashboard
                oauth_user_provider:
                    service: user.provider.user_provider
            logout:
                path: /logout
                target: /
            anonymous: true
            switch_user: true

    access_decision_manager:
        strategy: affirmative # or unanimous
#        allow_if_abstain: true

    access_control:
        - { path: ^/api/, role: ROLE_API }
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/, role: ROLE_ADMIN }
        - { path: ^/efconnect, role: ROLE_USER }
        - { path: ^/elfinder, role: ROLE_USER }
#        - { path: ^/admin/logout$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/admin/login_check$, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/oauth-login, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/oauth-connect, role: IS_AUTHENTICATED_ANONYMOUSLY }
#        - { path: ^/admin/, role: [ROLE_ADMIN, ROLE_SONATA_ADMIN] }
#        - { path: ^/.*, role: IS_AUTHENTICATED_ANONYMOUSLY }
