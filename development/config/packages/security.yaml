security:
  encoders:
    App\Entity\User:
      algorithm: bcrypt
      cost: 13

  role_hierarchy:
    ROLE_SUPER_ADMIN: ROLE_ADMIN
    ROLE_ADMIN: ROLE_USER

  providers:
    user_provider:
      id: App\Security\UserProvider

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    main:
      pattern: ^/(?!api)
      form_login:
        csrf_token_generator: security.csrf.token_manager
        default_target_path: /admin/dashboard
        always_use_default_target_path: true
      logout: true
      anonymous: true
      oauth:
        resource_owners:
          google: /login/check-google
          github: /login/check-github
        login_path: /login
        use_forward: false
        failure_path: /login
        oauth_user_provider:
          service: App\Security\UserProvider

    api_refresh:
      pattern: ^/api/token/refresh
      stateless: true
      anonymous: true

    api_login:
      pattern: ^/api/login
      stateless: true
      anonymous: true
      form_login:
        check_path: /api/login_check
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure
        require_previous_session: false

    api:
      pattern: ^/api/
      stateless: true
      anonymous: true
      guard:
        authenticators:
          - lexik_jwt_authentication.jwt_token_authenticator

  # Easy way to control access for large sections of your site
  # Note: Only the *first* access control that matches will be used
  access_control:
    - { path: ^/admin/, role: ROLE_ADMIN }
    - { path: ^/easy-admin/, role: ROLE_ADMIN }
    - { path: ^/api/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/api, role: IS_AUTHENTICATED_FULLY }
    - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
    - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
